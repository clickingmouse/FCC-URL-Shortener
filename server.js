 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var bodyParser =require('body-parser');
var cors = require('cors');
var mongoose = require('mongoose');
var isUrl=require('is-url');
var shortid=require('shortid');
var validUrl=require('valid-url');
//var path=require('path');
//var fs=require('fs');
var router=express.Router();
var app = express();
var path=require('path');

// connection to monggo db
mongoose.connect(process.env.MONGO_URI);
var Schema = mongoose.Schema;
// database structure


var shortUrlSchema = new Schema ({
original_url:String,
  shortened_url:String
});
var ShortUrl = mongoose.model('ShortUrl', shortUrlSchema);


// testing purposes insert
var createAndSaveShortURL = function(done){
var shortUrl = new ShortUrl({
original_url:"http://www.freecodecamp.com",
  shortened_url:"abcxyz"
})

shortUrl.save(function(err,data){
if(err) return done(err)
        
  console.log(data);
  done(null,data);
        
})
}

//createAndSaveShortURL();

// get string value
// test for new

//app.get('/',(req,res)=>{ 
//console.log("got a root request")
//})


app.get('/new/*',(req,res)=>{
console.log('got a new shortener request --->'+ req.params[0] +"<---");
//var input=req.params.url;
  //console.log(typeof(input));
  // check if provided url is valid
 // console.log(isURL(input));
  console.log('===============================');
console.log(validUrl.isUri(req.params[0]));
  if(validUrl.isUri(req.params[0])){
  console.log("shortid::"+shortid.generate());
  var shortenURL= shortid.generate()
  var original_url = req.params[0]; 
    //////////////////////////////////////////////
  //res.send({"original url": req.params[0], "shorten url":shortenURL});
  ///////////////////////////////////////////////////////////////////////////////////////////
    //check if inputted url does not exists 
    console.log("finding...");
  ShortUrl.find({original_url:"http://www.freecodecamp.org"},function(err,data){ 
                console.log(data);
    console.log(data.length);
                
                });
    //////////////////////////////////////////////////////////////////////////
    console.log("finding...");
  ShortUrl.find({original_url:req.params[0]},function(err,data){ 
                console.log(data);
    console.log(data.length);
    // only insert if dat length is 0        
    if (data.length == 0) {
var shortUrl = new ShortUrl({
original_url:original_url,
  shortened_url:"https://dirt-area.glitch.me/" + shortenURL
})

shortUrl.save(function(err,data){
if(err) return done(err)
        
  console.log(data);
    
})
    } else {
              console.log("already exitst");
              console.log(data);
      var result = data[0].toObject().shortened_url;
            console.log(result);

              var foundData = {
              original_url:data[0].toObject().original_url,
                shortened_url:result
              } //end obj
      res.send(foundData);
                    }
                });

  }else{
  res.send("error");
  }
});

/////////////////////////////////////// PART II ///////////////////////////////////////
/// reroute page base on short url
//
//
//
//
///////////////////////////////////////////////////////////////////////////////////////
app.get('/:short_url', (req,res)=>{
  console.log("------------");
  console.log(req.params.short_url)
ShortUrl.find({shortened_url:"https://dirt-area.glitch.me/"+req.params.short_url},function(err,data){ 
                console.log(data);
  var original = data[0].toObject().original_url;
 // .                data[0].toObject().original_url,
  console.log("redirecting...");
    console.log(original);
  res.redirect(original);
  }) //end find
})



app.get("/", function(req,res){
res.sendFile(path.join(__dirname+ '/public/index.html'));
});

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});













/* link input either in form of url or not,
if url -> geneerate shorturl
-> output in browser

if not url -> get original url 
-> redirecct to 




*/







/*

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

*/